{
  "stats": {
    "suites": 2,
    "tests": 7,
    "passes": 6,
    "pending": 1,
    "failures": 0,
    "start": "2024-04-21T20:54:50.551Z",
    "end": "2024-04-21T20:54:52.400Z",
    "duration": 1849,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 14.285714285714285,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a7fbc513-a977-4251-8b07-cb197e42ea56",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "01426151-fd41-4960-ac76-f4c6837a3b34",
          "title": "Currency Exchange API",
          "fullFile": "/Users/kod/payrails-alphavantage-test/api-tests/currency_exchange_api.js",
          "file": "/api-tests/currency_exchange_api.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET the exchange rate from Bitcoin to Chinese Yuan",
              "fullTitle": "Currency Exchange API GET the exchange rate from Bitcoin to Chinese Yuan",
              "timedOut": false,
              "duration": 291,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Define the parameters for the request\nlet FROM_CURRENCY = \"BTC\";\nlet TO_CURRENCY = \"CNY\";\n// Make a request to the API\nconst request = await axios.get(\n  `${BASE_URL}/query?function=${FUNCTION}&from_currency=${FROM_CURRENCY}&to_currency=${TO_CURRENCY}&apikey=${API_KEY}`\n).then((response) => {\n    console.log(response.data);\n    return response;\n  })\n  .catch((error) => {\n    return error;\n  });;\nconst response = request;\nconsole.log(response.data);\n//assert response status and error\nexpect(response.status).to.equal(200);\nassert(!response.data.error);\n// Assert response time is less than 1 second\nconst startTime = new Date().getTime();\nconst endTime = new Date().getTime();\nconst responseTime = endTime - startTime;\nconsole.log(responseTime);\nexpect(responseTime).to.be.lessThan(1000); // 1 second\n\n// Write the response to a file\nfs.writeFileSync(\"responses/currency_exchange_response.json\", JSON.stringify(response.data));",
              "err": {},
              "uuid": "f9263608-69d4-4283-bddd-303b01a8e7e8",
              "parentUUID": "01426151-fd41-4960-ac76-f4c6837a3b34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET the exchange rate without providing the API key",
              "fullTitle": "Currency Exchange API GET the exchange rate without providing the API key",
              "timedOut": false,
              "duration": 129,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let FROM_CURRENCY = \"EUR\";\nlet TO_CURRENCY = \"USD\";\n// Make a GET request to the API with API key = NULL\nconst request = await axios.get(\n  `${BASE_URL}/query?function=${FUNCTION}&from_currency=${FROM_CURRENCY}&to_currency=${TO_CURRENCY}`\n).then((response) => {\n    console.log(response.data);\n    return response;\n  })\n  .catch((error) => {\n    return error;\n  });;\nconst response = request;\nconsole.log(response.data);\n//assert response status and error\nexpect(response.status).to.equal(200); // expected response status should be 401\nassert(!response.data.error);\nassert.property(response.data, \"Error Message\");\nassert.equal(\n  response.data[\"Error Message\"],\n  \"the parameter apikey is invalid or missing. Please claim your free API key on (https://www.alphavantage.co//support/#api-key). It should take less than 20 seconds.\"\n);",
              "err": {},
              "uuid": "42b5544e-28be-4b3d-8d90-0f1142458370",
              "parentUUID": "01426151-fd41-4960-ac76-f4c6837a3b34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET the exchange rate from BTC to EUR with missing required parameters",
              "fullTitle": "Currency Exchange API GET the exchange rate from BTC to EUR with missing required parameters",
              "timedOut": false,
              "duration": 161,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let FROM_CURRENCY = \"BTC\";\nlet TO_CURRENCY = \"EUR\";\n//Make a GET request to the API endpoint without the function parameter\nconst request = await axios.get(\n  `${BASE_URL}/query?from_currency=${FROM_CURRENCY}&to_currency=${TO_CURRENCY}&apikey=${API_KEY}`\n).then((response) => {\n    console.log(response.data);\n    return response;\n  })\n  .catch((error) => {\n    return error;\n  });;\nconst response = request;\nconsole.log(response.data.error);\nexpect(response.status).to.equal(200); // expected response status 400\nassert(!response.data.error);",
              "err": {},
              "uuid": "cc48e949-c293-4e43-9257-0a57b893e410",
              "parentUUID": "01426151-fd41-4960-ac76-f4c6837a3b34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Perform request to the API with a restricted method",
              "fullTitle": "Currency Exchange API Perform request to the API with a restricted method",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8540c745-f4c1-4855-8aac-cdb96d75b5cd",
              "parentUUID": "01426151-fd41-4960-ac76-f4c6837a3b34",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f9263608-69d4-4283-bddd-303b01a8e7e8",
            "42b5544e-28be-4b3d-8d90-0f1142458370",
            "cc48e949-c293-4e43-9257-0a57b893e410"
          ],
          "failures": [],
          "pending": [
            "8540c745-f4c1-4855-8aac-cdb96d75b5cd"
          ],
          "skipped": [],
          "duration": 581,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8ed725bf-f313-413d-8473-262394aadbc7",
          "title": "News Sentiment API",
          "fullFile": "/Users/kod/payrails-alphavantage-test/api-tests/news_sentiment_api.js",
          "file": "/api-tests/news_sentiment_api.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify a valid request to the News Sentiment API",
              "fullTitle": "News Sentiment API Verify a valid request to the News Sentiment API",
              "timedOut": false,
              "duration": 417,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let tickers = \"GOOG\"; //  AAPL,GOOG,MSFT\nconst request = await axios.get(\n  `${BASE_URL}/query?function=${FUNCTION}&tickers=${tickers}&outputsize=full&apikey=demo&apiKey=${API_KEY}`\n);\nconst response = request;\n//default header values\nconst contentType = response.headers[\"content-type\"];\nconst block = (axios.defaults.headers.common[\"X-XSS-Protection\"] =\n  \"1; mode=block\");\nconst deny = (response.headers[\"X-Frame-Options\"] = \"DENY\");\nconst nosniff = (axios.defaults.headers.common[\"X-Content-Type-Options\"] =\n  \"nosniff\");\nconst strict = (axios.defaults.headers.common[\"Strict-Transport-Security\"] =\n  \"max-age=31536000; includeSubDomains\");\nexpect(response).to.be.an(\"object\");\nassert.equal(response.status, 200); //response status code is 200\n// Check Content-Type header is set to \"application/json\"\nassert.equal(contentType, \"application/json\");\n// Check that the X-XSS-Protection header is set to \"1; mode=block\"\nassert.equal(block, \"1; mode=block\");\n// Check that the X-Frame-Options header is set to \"DENY\"\nassert.equal(deny, \"DENY\");\n// Check that the X-Content-Type-Options header is set to \"nosniff\"\nassert.equal(nosniff, \"nosniff\");\n// Check the Strict transport setting\nassert.equal(strict, \"max-age=31536000; includeSubDomains\");\nassert.equal(response[\"Error Message\"], null);",
              "err": {},
              "uuid": "2c331e2b-0b31-47c6-ab1d-0f1279c9e65c",
              "parentUUID": "8ed725bf-f313-413d-8473-262394aadbc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get news articles with missing or invalid API key",
              "fullTitle": "News Sentiment API Get news articles with missing or invalid API key",
              "timedOut": false,
              "duration": 401,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let tickers = \"AAPL\"; //  AAPL,GOOG,MSFT\nlet API_KEY = \"\";\nconst request = await axios.get(\n  `${BASE_URL}/query?function=${FUNCTION}&tickers=${tickers}&outputsize=full&apiKey=${API_KEY}`\n);\nconst response = request;\n//default header values\nconst contentType = response.headers[\"content-type\"];\nconst block = (axios.defaults.headers.common[\"X-XSS-Protection\"] =\n  \"1; mode=block\");\nconst deny = (response.headers[\"X-Frame-Options\"] = \"DENY\");\nconst nosniff = (axios.defaults.headers.common[\"X-Content-Type-Options\"] =\n  \"nosniff\");\nconst strict = (axios.defaults.headers.common[\"Strict-Transport-Security\"] =\n  \"max-age=31536000; includeSubDomains\");\nexpect(response).to.be.an(\"object\");\nassert.equal(response.status, 200); //response status code is 200\n// Check Content-Type header is set to \"application/json\"\nassert.equal(contentType, \"application/json\");\n// Check that the X-XSS-Protection header is set to \"1; mode=block\"\nassert.equal(block, \"1; mode=block\");\n// Check that the X-Frame-Options header is set to \"DENY\"\nassert.equal(deny, \"DENY\");\n// Check that the X-Content-Type-Options header is set to \"nosniff\"\nassert.equal(nosniff, \"nosniff\");\nassert(!response.data.error);\nassert.property(response.data, \"Error Message\");\nassert.equal(\n  response.data[\"Error Message\"],\n  \"the parameter apikey is invalid or missing. Please claim your free API key on (https://www.alphavantage.co//support/#api-key). It should take less than 20 seconds.\"\n);",
              "err": {},
              "uuid": "db339201-9244-4e0e-bad4-49efdeb1a4d9",
              "parentUUID": "8ed725bf-f313-413d-8473-262394aadbc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get news articles with invalid news with missing/invalid required parameters",
              "fullTitle": "News Sentiment API Get news articles with invalid news with missing/invalid required parameters",
              "timedOut": false,
              "duration": 444,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let FUNCTION = \"NEWS_ERROR\";\nlet tickers = \"\";\nconst request = await axios.get(\n  `${BASE_URL}/query?&function=${FUNCTION}&tickers=${tickers}&outputsize=full&apiKey=${API_KEY}`\n);\nconst response = request;\n//default header values\nconst contentType = response.headers[\"content-type\"];\nconst block = (axios.defaults.headers.common[\"X-XSS-Protection\"] =\n  \"1; mode=block\");\nconst deny = (response.headers[\"X-Frame-Options\"] = \"DENY\");\nconst nosniff = (axios.defaults.headers.common[\"X-Content-Type-Options\"] =\n  \"nosniff\");\nconst strict = (axios.defaults.headers.common[\"Strict-Transport-Security\"] =\n  \"max-age=31536000; includeSubDomains\");\nexpect(response).to.be.an(\"object\");\nassert.equal(response.status, 200); //response status code is 200\n// Check Content-Type header is set to \"application/json\"\nassert.equal(contentType, \"application/json\");\n// Check that the X-XSS-Protection header is set to \"1; mode=block\"\nassert.equal(block, \"1; mode=block\");\n// Check that the X-Frame-Options header is set to \"DENY\"\nassert.equal(deny, \"DENY\");\n// Check that the X-Content-Type-Options header is set to \"nosniff\"\nassert.equal(nosniff, \"nosniff\");\nexpect(response.status).to.equal(200);\nassert.property(response.data, \"Error Message\");",
              "err": {},
              "uuid": "b38aa2db-d74c-4c2d-abc9-9690fbe882d0",
              "parentUUID": "8ed725bf-f313-413d-8473-262394aadbc7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2c331e2b-0b31-47c6-ab1d-0f1279c9e65c",
            "db339201-9244-4e0e-bad4-49efdeb1a4d9",
            "b38aa2db-d74c-4c2d-abc9-9690fbe882d0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1262,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}